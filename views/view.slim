doctype html
html
  head
    title HTTP Responder: debug and stub webhooks like a pro.
    link href=url("/css/bootstrap.no-icons.min.css") rel="stylesheet"
    link href="//netdna.bootstrapcdn.com/font-awesome/2.0/css/font-awesome.css" rel="stylesheet"
    link rel="stylesheet" href=url("/view.css")
    link rel="stylesheet" href=url("/js/codemirror/codemirror.css")
    script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js" type="text/javascript"
    script src="//netdna.bootstrapcdn.com/twitter-bootstrap/2.2.2/js/bootstrap.min.js"
    script src=url("/js/codemirror/codemirror.js") type="text/javascript"
    script src=url("/js/codemirror/modes/xml.js") type="text/javascript"
    script src=url("/js/codemirror/modes/javascript.js") type="text/javascript"
    javascript:
      var editorsCreated = false;

      function createEditors() {
        if (editorsCreated) return;
        editorsCreated = true;
        var jsonEditor = CodeMirror.fromTextArea(document.getElementById("json"), {
          lineNumbers: true,
          matchBrackets: true,
          mode: { name: "javascript", json: true }
        });
        var xmlEditor = CodeMirror.fromTextArea(document.getElementById("xml"), {
          lineNumbers: true,
          mode: { name: "xml", alignCDATA: true }
        });
      }

      $(function() {
        $('#create').click(function() {
          $('#response-form').submit();
        });

        $('#cancel-destroy').click(function() {
          $('#prompt-for-destroy').modal('hide');
        });

        $('#destroy').click(function() {
          $('#response-form').attr('action', '#{{url("/#{code}?destroy")}}').submit();
        });
      });
    - if known?
      javascript:
        $(function() {
          $('a[data-toggle="tab"]').on('shown', function(e) {
            if (e.target.hash == "#response") {
              createEditors();
            }
          });
        });
    - else
      javascript:
        $(function() {
          createEditors();
        });

    - if runscope_authenticated?
      javascript:
        $(function() {
          $('#requests').on('click', '.runscope-export', function(e) {
            e.preventDefault();
            var $this = $(this);

            // Ensure only one request at a time.
            var processing = $this.attr('data-processing');
            if (processing == 'true') {
              return;
            }

            var linked = $this.attr('data-export-href');
            if (linked) {
              handleSuccess($this, linked);
              return;
            }

            $this.attr('data-processing', 'true');
            $.post($this.attr('href'))
              .done(function(data) {
                $this.attr('data-export-href', data);
                handleSuccess($this, data);
              })
              .fail(function(jqXHR, status, error) {
                $this.popover({
                  title: 'Export Failed',
                  content: 'The request could not be exported to Runscope at this time.' });
                $this.popover('show');
                setTimeout(function() { $this.popover('hide'); }, 5000);
              })
              .always(function() {
                $this.removeAttr('data-processing');
              });
          });
        });

        function handleSuccess($this, link) {
          $this.popover({
                  title: 'Export Successful',
                  content: 'The request was exported to Runscope. <a href="' + link + '" target="_blank">View it here.</a>' });
          $this.popover('show');
          setTimeout(function() { $this.popover('hide'); }, 5000);
        }

    javascript:
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-361923-6']);
      _gaq.push(['_trackPageview']);
      (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();

  body
    .container
      - if supports_runscope?
        .pull-right
          - if !runscope_authenticated?
            a href="https://www.runscope.com/signin/oauth/authorize?response_type=code&client_id=#{RUNSCOPE_ID}&redirect_uri=#{url("/runscope/oauth")}&scope=api:read%20message:write%20bucket:auth_token&state=#{runscope_state}"
              img title="Log in to Runscope" src=url("/runscope-eye.png")
          - else
            i.icon-ok
            | &nbsp;
            a href="https://www.runscope.com/"
              img title="Authenticated with Runscope" src=url("/runscope-eye-tiny.png")
      .page-header
        h2
          a href=url("/") = url("/").chomp("/")
          = request.path_info

      - if flash[:notice]
        .row
          .span12
            .alert.alert-success.fade.in
              a.close data-dismiss="alert" href="#" x
              == flash[:notice]

      - if flash[:warning]
        .row
          .span12
            .alert.alert-error.fade.in
              a.close data-dismiss="alert" href="#" x
              == flash[:warning]

      - if known?
        ul.nav.nav-tabs
          li[class=active_if_known]
            a data-toggle="tab" href='#requests'
              h4 Requests
          li[class=active_if_unknown]
            a data-toggle="tab" href='#response'
              h4 Response
      - else
        .row
          .span12
            .alert.alert-block
              a.close data-dismiss="alert" href='#' x
              p
                strong You must first create this endpoint
                | , even if you're not going to provide a response. Otherwise we will respond with a
                strong< 404
                | , like, forever.
              p
                a#create.btn.btn-small href='#' Create it Empty
                span &nbsp;&nbsp;...or fill out the content below and create it.

      .tab-content
        - if known?
          #requests.tab-pane[class=active_if_known]
            .alert
              strong
                | Requests are only stored for 2 days and then deleted. 
              a.clear href='?clear' Clear now
            - requests.each do |req|
              .row
                .span2
                  p.metadata
                    | #{req['time'].strftime('%m/%d/%Y %H:%M:%S.%L UTC')}
                    br
                    | #{req['ip']}
                    br
                    - if runscope_authenticated?
                      a.runscope-export rel="clickover" href=url("/runscope/export?code=#{code}&id=#{req['id']}") data-placement="bottom" data-trigger="manual" data-html="true"
                        img title="Export to your default Runscope bucket" src=url("/runscope-eye-tiny.png")
                .span10.request
                  h3 #{req['method']}&nbsp;#{req['path']}
                  h4
                    em Headers
                  - if !req['headers'].nil? and !req['headers'].empty?
                    p.request-headers
                      - req['headers'].sort.each do |name,value|
                        strong #{name}:&nbsp;
                        | #{value}
                        br
                  - if !req['params'].nil? and !req['params'].empty?
                    h4
                      em Parameters
                    p
                      - req['params'].each do |name,value|
                        strong #{name}:&nbsp;
                        | #{value}
                        br
                  - elsif !req['body'].nil?
                    h4
                      em Body
                    p
                      | #{req['body']}

        #response.tab-pane[class=active_if_unknown]
          form#response-form method="POST" action=url("/#{code}?view")
            .row
              .span6
                h2
                  | { JSON }
                textarea.span8#json name="json" rows="15"
                  = config["json"] if known?
              .span6
                h2 &lt; XML &gt;
                textarea.span8#xml name="xml" rows="15"
                  = config["xml"] if known?
            .form-actions
              input.btn.btn-large.btn-primary type="submit" value="#{unknown? ? 'Create' : 'Update'}"
              - if known?
                a#destroy-prompt.btn.btn-large.btn-danger.pull-right role="button" data-toggle="modal" href='#prompt-for-destroy' Destroy
                span#destroy-note.pull-right be tidy! clean up after yourself

      #prompt-for-destroy.modal.hide.fade aria-labelledby="destroy-modal-label" aria-hidden="true"
        .modal-header
          button.close type="button" data-dismiss="modal" aria-hidden="true" x
          h3#destroy-modal-label Destroy Endpoint?
        .modal-body
          p Destroying the endpoint will purge the response JSON and XML, as well as all stored requests.
        .modal-footer
          a#destroy.btn.btn-danger href='#' Destroy
          a#cancel-destroy.btn href='#' Cancel
